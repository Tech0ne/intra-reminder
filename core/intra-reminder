#!/usr/bin/python3

from requests import Session
from getpass import getuser
from subprocess import Popen as popen
from datetime import date, timedelta, datetime
from threading import Timer

import json
import sys
import os


BASE_URL = "https://intra.epitech.eu/"


def report_crash(data: str):
    now = datetime.now().strftime("[%d/%m/%Y %H:%M:%S] ")
    with open(f"/home/{getuser()}/.local/share/intranet-reminder/intra-reminder-crash-report", 'a+') as f:
        f.write(now)
        f.write(data)
        f.write('\n')
        f.write(now)
        f.write("END REPORT\n\n")

def mkdir(path):
    p = "/"
    for e in path.split('/'):
        p += e
        if (p[-1] != '/'):
            p += '/'
        try:
            os.mkdir(p)
        except Exception as e:
            report_crash(f"Could not create path {p} : {e}")

def get_events_list(cookie, _date: date, keep_registered = True, keep_unregistered = False):
    url = BASE_URL + "planning/load"
    s = Session()

    s.cookies.set("user", cookie, domain="intra.epitech.eu")

    formated_date = _date.strftime("%Y-%m-%d")
    try:
        planning = json.loads(
            s.get(url,
                params={
                "format": "json",
                "start": formated_date,
                "end": formated_date
            }).text)
    except Exception as e:
        report_crash(f"Error fetching data : {e}")
        return []

    liste = []
    for e in planning:
        if e.get("event_registered") == "registered" and keep_registered:
            liste.append(e)
        if e.get("event_registered") != "registered" and keep_unregistered:
            liste.append(e)
    liste = sorted(liste, key=lambda d: d.get("start"))
    return liste

def send_message(webhook_url, command, message):
    if webhook_url:
        try:
            s = Session()
            data = {
                "content": "||@everyone||\n"+message,
                "username": "Intra-reminder"
            }
            s.post(webhook_url, json=data)
        except Exception as e:
            report_crash(f"Could not send to webhook : {e}")
    if command:
        try:
            os.system(command.replace("{MESSAGE}", message.replace('&', "&amp;").replace('"', '\\"')))
        except Exception as e:
            report_crash(f"Error when executing desktop command : {e}")

def today_plus_x(distance):
    return date.today() + timedelta(days=distance)

def check_unsub(api_key, command, webhook_url, distance):
    evts = get_events_list_in_x_days(api_key, distance, False, True)
    unsub = []
    for e in evts:
        unsub.append(f"{e.get('acti_title')} in {e.get('room').get('code')} at {e.get('start')} ({BASE_URL}module/{e.get('scolaryear')}/{e.get('codemodule')}/{e.get('codeinstance')}/{e.get('codeacti')}/)")
    for e in [unsub[i:i+7] for i in range(0, len(unsub), 7)]:
        message = f"Warning ! You have unsubscribed activities for the {(date.today() + timedelta(days=distance)).strftime('%d/%m/%Y')} : \n\n" + '\n\n'.join(e)
        send_message(webhook_url, command, message)

def reminder(api_key, webhook_url, command, timer_list):
    evts = get_events_list_in_x_days(api_key, 0, True, False, True)
    for e in evts:
        for t in timer_list:
            timer = (datetime.strptime(e.get('start'), "%Y-%m-%d %H:%M:%S") - datetime.now()).total_seconds() - (t * 60)
            if timer < 0:
                continue
            message = f"You will have the activity {e.get('acti_title')} in {t} min at {e.get('start')} in {e.get('room').get('code')} ({BASE_URL}module/{e.get('scolaryear')}/{e.get('codemodule')}/{e.get('codeinstance')}/{e.get('codeacti')}/)"
            Timer(timer, send_message, args=(webhook_url, command, message)).start()


def daily_check(api_key, webhook_url, command):
    evts = get_events_list_in_x_days(api_key, 0, True, False)
    activity = []
    for e in evts:
        activity.append(f"{e.get('acti_title')} in {e.get('room').get('code')} at {e.get('start')} ({BASE_URL}module/{e.get('scolaryear')}/{e.get('codemodule')}/{e.get('codeinstance')}/{e.get('codeacti')}/)")
    for e in [activity[i:i+7] for i in range(0, len(activity), 7)]:
        message = f"Today ({date.today().strftime('%d/%m/%Y')}) you have these activities : \n\n" + '\n\n'.join(e)
        send_message(webhook_url, command, message)


def get_events_list_in_x_days(cookie, nb_days, keep_registered=True, keep_unregistered=True, remove_before=False):
    liste = get_events_list(cookie, date.today() + timedelta(days=nb_days), keep_registered, keep_unregistered)
    total = []
    for e in liste:
        if remove_before:
            evt_time = datetime.strptime(e.get("start"))
            if evt_time > datetime.now():
                continue
        if e.get("event_registered") == "registered" and keep_registered:
            total.append(e)
        if e.get("event_registered") != "registered" and keep_unregistered:
            total.append(e)
    return total

def do_zip_update():
    r = Session().get("https://raw.githubusercontent.com/Tech0ne/intra-reminder/main/core/intra-reminder").text
    try:
        with open(f"/home/{getuser()}/.local/share/intranet-reminder/intra-reminder", 'r') as f:
            data = f.read()
    except Exception as e:
        report_crash(f"Could not open file /home/{getuser()}/.local/share/intranet-reminder/intra-reminder : {e}")
        data = ""
    if data != r:
        report_crash("UPDATE")
        mkdir(f"/home/{getuser()}/.local/share/intranet-reminder/")
        with open(f"/home/{getuser()}/.local/share/intranet-reminder/intra-reminder", 'w+') as f:
            f.write(r)
        report_crash("UPDATE COMPLETE")
        os.system(f"chmod +x /home/{getuser()}/.local/share/intranet-reminder/intra-reminder")
        popen([f"/home/{getuser()}/.local/share/intranet-reminder/intra-reminder"])
        sys.exit(1)

do_zip_update()

if not os.path.isfile(f"/home/{getuser()}/.local/share/intranet-reminder/config"):
    report_crash("NO config FILE FOUND (IMPORTANT)")
    sys.exit(1)

with open(f"/home/{getuser()}/.local/share/intranet-reminder/config", 'r') as f:
    data = f.read()

lines = []
for e in data.split('\n'):
    if e and not e.startswith('#'):
        lines.append(e)

api_key = notify_command = webhook_url = reminder_timer = unsub_distance = None

for e in lines:
    try:
        exec(e)
    except Exception as err:
        report_crash(f"Error reading config file (line : {e}): {err}")
        sys.exit(1)

try:
    if api_key == None or notify_command == None or webhook_url == None or reminder_timer == None or unsub_distance == None:
        report_crash("Invalid config file (required values not found)")
        sys.exit(1)
except Exception as e:
    report_crash(f"Error checking config file : {e}")
    sys.exit(1)

try:
    with open(f"/home/{getuser()}/.local/share/intranet-reminder/.last_check", 'r+') as f:
        data = f.read()
except:
    data = ""

reminder(api_key, webhook_url, notify_command, reminder_timer)
if (unsub_distance):
    check_unsub(api_key, notify_command, webhook_url, unsub_distance)

if data != datetime.now().strftime("%Y-%m-%d"):
    daily_check(api_key, webhook_url, notify_command)

with open(f"/home/{getuser()}/.local/share/intranet-reminder/.last_check", 'w+') as f:
    f.write(datetime.now().strftime("%Y-%m-%d"))
